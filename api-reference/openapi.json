{
  "openapi": "3.1.1",
  "info": {
    "title": "laminar",
    "description": "",
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.lmnr.ai"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/pipeline/run": {
      "post": {
        "tags": [
          "api::pipelines"
        ],
        "operationId": "run_pipeline_graph",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GraphRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pipeline run result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["runId", "outputs"],
                  "properties": {
                    "runId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "outputs" : {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/GraphRunOutput"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/semantic-search": {
      "post": {
        "tags": [
          "api::semantic-search"
        ],
        "operationId": "semantic_search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Semantic search result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SemanticSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Cannot parse the JSON payload into a valid request. Common causes: `datasetId` is not a valid UUID",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Json deserialize error."
                }
              }
            }
          },
          "404": {
            "description": "Dataset not found. Either `datasetId` is not found within the project defined by project API key.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Dataset not found."
                }
              }
            }
          }
        }
      }
    },
    "/v1/queues/push": {
      "post": {
        "tags": [
          "api::queues"
        ],
        "operationId": "push_to_queue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueuePushRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Queue push response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Items uploaded successfully."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Cannot parse the JSON payload into a valid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Json deserialize error."
                }
              }
            }
          },
          "404": {
            "description": "Queue not found. `queueName` is not found within the project defined by project API key.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Queue not found."
                }
              }
            }
          }
        }
      }
    },
    "/v1/agent/run": {
      "post": {
        "tags": [
          "api::agent"
        ],
        "operationId": "run_agent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Agent run result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunAgentDefaultResponse"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/RunAgentStreamChunk"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Cannot parse the JSON payload into a valid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Json deserialize error."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Project API key is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid project API key."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "ChatMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": ["role", "content"]
      },
      "ConditionedValue": {
        "type": "object",
        "properties": {
          "condition": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["condition", "value"]
      },
      "NodeInput": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatMessage"
            }
          },
          {
            "$ref": "#/components/schemas/ConditionedValue"
          }
        ]
      },
      "GraphRequest": {
        "type": "object",
        "required": [
          "pipeline",
          "inputs",
          "env"
        ],
        "properties": {
          "pipeline": {
            "type": "string",
            "description": "Name of the pipeline to be called. Not to be confused with the pipeline version name. Target pipeline version for the pipeline is set in the UI."
          },
          "inputs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeInput"
            }
          },
          "env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The keys are env variables such as OPENAI_API_KEY, POSTGRES_URL, etc."
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Per-request metadata. Keys are arbitrary strings such as user_id, etc.",
            "nullable": true
          },
          "stream": {
            "type": "boolean",
            "description": "If true, each node's output will be streamed. For some nodes, the whole execution will be streamed (e.g. LLM). Final value will be the run trace.",
            "nullable": true
          }
        }
      },
      "GraphRunOutput": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "$ref": "#/components/schemas/NodeInput"
          }
        }
      },
      "SemanticSearchRequest": {
        "type": "object",
        "required": ["query", "datasetId"],
        "properties": {
          "query": {
            "description": "Query string to search semantically similar records",
            "type": "string"
          },
          "datasetId": {
            "description": "Dataset ID to search from.",
            "type": "string",
            "format": "uuid"
          },
          "limit": {
            "description": "Maximum number of results to return. Defaults to 10.",
            "type": "integer",
            "format": "int32",
            "default": 10,
            "minimum": 0
          },
          "threshold": {
            "description": "Minimum semantic similarity score threshold for the results. Defaults to 0.0.",
            "type": "number",
            "format": "float",
            "minimum": 0.0,
            "maximum": 1.0,
            "default": 0.0
          },
          "metadataFilters": {
            "description": "Filters to apply to the dataset. Each item in the array is a record from keys to values. Records within the record are joined with AND operator. Array items are joined with OR operator. For example, [{\"name\": \"John\"}, {\"age\": 30, \"city\": \"New York\"}] will return records where name is John or (age is 30 and city is New York).",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "description": "Record from keys to values. Keys are metadata field names, values are metadata field values. Joined with AND operator."
              }
            }
          }
        }
      },
      "SemanticSearchResponse": {
        "type": "object",
        "required": ["results"],
        "properties": {
          "results": {
            "description": "List of semantic search results, ordered by score in descending order",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SemanticSearchResult"
            }
          }
        }
      },
      "SemanticSearchResult": {
        "type": "object",
        "required": ["datasetId", "score", "data", "content"],
        "properties": {
          "datasetId": {
            "description": "Dataset ID",
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "description": "Semantic similarity score between the query and the data",
            "type": "number",
            "format": "float",
            "minimum": 0.0,
            "maximum": 1.0
          },
          "data": {
            "description": "Data object – `data` field from the dataset",
            "type": "object"
          },
          "content": {
            "description": "Content from the data point that matched the query. Usually entire content of the field that dataset is indexed on, but might be a chunk of it, if it is too long.",
            "type": "string"
          }
        }
      },
      "QueuePushItem": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "description": "Unique datapoint ID. If not specified, a UUID v4 will be generated.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the datapoint. If not specified, an empty string is used.",
            "type": "string"
          },
          "input": {
            "description": "Input of the datapoint. Can be any JSON value. Defaults to null."
          },
          "output": {
            "description": "Output of the datapoint. Can be any JSON value. Defaults to null."
          },
          "attributes": {
            "description": "Attributes of the datapoint. Can be any JSON object. Defaults to an empty object.",
            "type": "object"
          }
        }
      },
      "QueuePushRequest": {
        "type": "object",
        "required": ["items", "queueName"],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of datapoints to push to the queue.",
            "items": {
              "$ref": "#/components/schemas/QueuePushItem"
            }
          },
          "queueName": {
            "description": "Name of the queue to push to. Must be an existing queue.",
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockText": {
        "type": "object",
        "required": ["type", "text"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text"]
          },
          "text": {
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockImageUrl": {
        "type": "object",
        "required": ["type", "url"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image"]
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockImageBase64": {
        "type": "object",
        "required": ["type", "base64"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image"]
          },
          "imageB64": {
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockImage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockImageUrl",
            "description": "Image URL."
          },
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockImageBase64",
            "description": "Image base64."
          }
        ]
      },
      "AgentChatMessageContentBlock": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockText",
            "description": "Text block."
          },
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockImage",
            "description": "Image block."
          }
        ]
      },
      "AgentChatMessageContent": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentChatMessageContentBlock"
            }
          }
        ]
      },
      "AgentChatMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/AgentChatMessageContent"
          },
          "name": {
            "type": "string"
          },
          "toolCallId": {
            "type": "string"
          },
          "isStateMessage": {
            "type": "boolean"
          }
        }
      },
      "AgentState": {
        "type": "string",
        "description": "Stringified list of chat messages with the underlying LLM."
      },
      "LaminarSpanContext": {
        "type": "object",
        "required": ["traceId", "spanId"],
        "properties": {
          "traceId": {
            "type": "string",
            "description": "OpenTelemetry trace ID in the UUID format."
          },
          "spanId": {
            "type": "string",
            "description": "OpenTelemetry span ID in the UUID format."
          },
          "isRemote": {
            "type": "boolean",
            "description": "Whether the span is remote."
          }
        }
      },
      "RunAgentRequest": {
        "type": "object",
        "required": ["prompt"],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The instructions to be used for the agent run."
          },
          "spanContext": {
            "$ref": "#/components/schemas/LaminarSpanContext",
            "description": "Laminar OpenTelemetry span context. Useful to embed agent spans in a larger trace."
          },
          "modelProvider": {
            "type": "string",
            "enum": ["anthropic", "bedrock"],
            "description": "LLM provider. Defaults to `anthropic`."
          },
          "model": {
            "type": "string",
            "description": "LLM model name. Must match the provider API model name, e.g. 'claude-3-7-sonnet-latest'."
          },
          "stream": {
            "type": "boolean",
            "description": "If true, the response will be streamed including the intermediate 'thinking' steps. If false, the response will be returned as a single message. Defaults to false."
          },
          "enableThinking": {
            "type": "boolean",
            "description": "The thinking parameter that is sent to the underlying LLM. Defaults to true."
          }
        }
      },
      "ActionResult": {
        "type": "object",
        "properties": {
          "isDone": {
            "type": "boolean",
            "description": "Whether the agent has finished its work. True on the final step."
          },
          "content": {
            "type": "string",
            "description": "The output of the agent."
          },
          "error": {
            "type": "string",
            "description": "The error that occurred during the agent run."
          }
        }
      },
      "RunAgentDefaultResponse": {
        "type": "object",
        "required": ["result"],
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ActionResult",
            "description": "The result of the agent run."
          }
        }
      },
      "RunAgentResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RunAgentDefaultResponse",
            "description": "Non-streaming response."
          },
          {
            "$ref": "#/components/schemas/RunAgentStreamChunk",
            "description": "Streaming response."
          }
        ]
      },
      "StepChunk": {
        "type": "object",
        "required": ["chunkType", "messageId", "actionResult", "summary"],
        "properties": {
          "chunkType": {
            "type": "string",
            "enum": ["step"]
          },
          "messageId": {
            "type": "string",
            "description": "The UUID of the message."
          },
          "actionResult": {
            "$ref": "#/components/schemas/ActionResult",
            "description": "The result of the agent run."
          },
          "summary": {
            "type": "string",
            "description": "A quick summary of the step."
          }
        }
      },
      "FinalOutputChunk": {
        "type": "object",
        "required": ["chunkType", "messageId", "content"],
        "properties": {
          "chunkType": {
            "type": "string",
            "enum": ["final_output"]
          },
          "messageId": {
            "type": "string",
            "description": "The UUID of the message."
          },
          "content": {
            "$ref": "#/components/schemas/RunAgentDefaultResponse",
            "description": "The final output of the agent."
          }
        }
      },
      "RunAgentStreamChunk": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StepChunk"
          },
          {
            "$ref": "#/components/schemas/FinalOutputChunk"
          }
        ]
      }
    }
  }
}
