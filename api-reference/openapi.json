{
  "openapi": "3.1.1",
  "info": {
    "title": "laminar",
    "description": "",
    "license": {
      "name": ""
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.lmnr.ai"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/queues/push": {
      "post": {
        "tags": [
          "api::queues"
        ],
        "operationId": "push_to_queue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueuePushRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Queue push response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Items uploaded successfully."
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Cannot parse the JSON payload into a valid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Json deserialize error."
                }
              }
            }
          },
          "404": {
            "description": "Queue not found. `queueName` is not found within the project defined by project API key.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Queue not found."
                }
              }
            }
          }
        }
      }
    },
    "/v1/agent/run": {
      "post": {
        "tags": [
          "api::agent"
        ],
        "operationId": "run_agent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunAgentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Agent run result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunAgentDefaultResponse"
                }
              },
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/RunAgentStreamChunk"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Cannot parse the JSON payload into a valid request.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Json deserialize error."
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Project API key is invalid.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Invalid project API key."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "QueuePushItem": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "description": "Unique datapoint ID. If not specified, a UUID v4 will be generated.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the datapoint. If not specified, an empty string is used.",
            "type": "string"
          },
          "input": {
            "description": "Input of the datapoint. Can be any JSON value. Defaults to null."
          },
          "output": {
            "description": "Output of the datapoint. Can be any JSON value. Defaults to null."
          },
          "attributes": {
            "description": "Attributes of the datapoint. Can be any JSON object. Defaults to an empty object.",
            "type": "object"
          }
        }
      },
      "QueuePushRequest": {
        "type": "object",
        "required": ["items", "queueName"],
        "properties": {
          "items": {
            "type": "array",
            "description": "List of datapoints to push to the queue.",
            "items": {
              "$ref": "#/components/schemas/QueuePushItem"
            }
          },
          "queueName": {
            "description": "Name of the queue to push to. Must be an existing queue.",
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockText": {
        "type": "object",
        "required": ["type", "text"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["text"]
          },
          "text": {
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockImageUrl": {
        "type": "object",
        "required": ["type", "url"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image"]
          },
          "imageUrl": {
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockImageBase64": {
        "type": "object",
        "required": ["type", "base64"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["image"]
          },
          "imageB64": {
            "type": "string"
          }
        }
      },
      "AgentChatMessageContentBlockImage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockImageUrl",
            "description": "Image URL."
          },
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockImageBase64",
            "description": "Image base64."
          }
        ]
      },
      "AgentChatMessageContentBlock": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockText",
            "description": "Text block."
          },
          {
            "$ref": "#/components/schemas/AgentChatMessageContentBlockImage",
            "description": "Image block."
          }
        ]
      },
      "AgentChatMessageContent": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentChatMessageContentBlock"
            }
          }
        ]
      },
      "AgentChatMessage": {
        "type": "object",
        "required": ["role", "content"],
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/AgentChatMessageContent"
          },
          "name": {
            "type": "string"
          },
          "toolCallId": {
            "type": "string"
          },
          "isStateMessage": {
            "type": "boolean"
          }
        }
      },
      "AgentState": {
        "type": "string",
        "description": "Stringified list of chat messages with the underlying LLM."
      },
      "LaminarSpanContext": {
        "type": "object",
        "required": ["traceId", "spanId"],
        "properties": {
          "traceId": {
            "type": "string",
            "description": "OpenTelemetry trace ID in the UUID format."
          },
          "spanId": {
            "type": "string",
            "description": "OpenTelemetry span ID in the UUID format."
          },
          "isRemote": {
            "type": "boolean",
            "description": "Whether the span is remote."
          }
        }
      },
      "RunAgentRequest": {
        "type": "object",
        "required": ["prompt"],
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The instructions to be used for the agent run."
          },
          "parentSpanContext": {
            "type": "string",
            "description": "Stringified Laminar OpenTelemetry span context. Useful to embed agent spans in a larger trace. Read more about LaminarSpanContext in our [tracing docs](/tracing/manual-instrumentation#using-laminarspancontext)."
          },
          "modelProvider": {
            "type": "string",
            "enum": ["anthropic", "gemini", "openai"],
            "description": "LLM provider. Make sure to explicitly set this parameter, especially if you are setting the `model` parameter."
          },
          "model": {
            "type": "string",
            "description": "LLM model name. Must match the provider API model name, e.g. 'claude-3-7-sonnet-latest'. Make sure to set the `modelProvider` parameter explicitly."
          },
          "stream": {
            "type": "boolean",
            "description": "If true, the response will be streamed including the intermediate 'thinking' steps. If false, the response will be returned as a single message. Currently, non-streaming connections timeout after 350 seconds. Laminar SDKs always set this to true, and, in the non-streaming mode, the response will be returned as a single message. Defaults to false."
          },
          "enableThinking": {
            "type": "boolean",
            "description": "The thinking parameter that is sent to the underlying LLM. This is always true for Gemini models. Defaults to true."
          },
          "agentState": {
            "type": "string",
            "description": "Stringified agent state as returned by a previous agent run. Useful to resume from a previous state."
          },
          "storageState": {
            "type": "string",
            "description": "Stringified browser storage state as returned by a previous agent run. Contains cookies and auth-related data."
          },
          "timeout": {
            "type": "number",
            "description": "Timeout in seconds. Only works in streaming mode. Note, this is a soft timeout, and the agent will finish its current step even if the timeout is reached. In addition, this timeout does not include initialization time."
          },
          "maxSteps": {
            "type": "number",
            "description": "Maximum number of steps to execute. Defaults to 100."
          },
          "cdpUrl": {
            "type": "string",
            "description": "URL of the Chrome DevTools Protocol (CDP) server. If not specified, Laminar will start its own CDP browser instance."
          },
          "thinkingTokenBudget": {
            "type": "number",
            "description": "Number of tokens the underlying LLM can use for thinking. Currently, there is a heuristic that converts the token budget to a reasoning effort parameter for OpenAI."
          },
          "startUrl": {
            "type": "string",
            "description": "URL to start the agent from. If not specified, the agent will infer this from the prompt. Make sure this is a valid URL with the protocol/scheme included."
          },
          "returnScreenshots": {
            "type": "boolean",
            "description": "Whether to return screenshots of the browser with each step. Ignored in non-streaming mode."
          },
          "returnAgentState": {
            "type": "boolean",
            "description": "Whether to return the agent state at the end of the run. CAUTION: This is a very large payload. Defaults to false."
          },
          "returnStorageState": {
            "type": "boolean",
            "description": "Whether to return the browser storage state at the end of the run. This includes cookies and auth-related data. CAUTION: This may be a very large payload. Defaults to false."
          } 
        }
      },
      "ActionResult": {
        "type": "object",
        "properties": {
          "isDone": {
            "type": "boolean",
            "description": "Whether the agent has finished its work. True on the final step, even if the agent has given control back to the user."
          },
          "content": {
            "type": "string",
            "description": "The output of the agent."
          },
          "error": {
            "type": "string",
            "description": "The error that occurred during the agent run."
          },
          "giveControl": {
            "type": "boolean",
            "description": "Whether the agent has given control back to the user. If true, the agent will pause and wait for the user to take over. If false, the agent is done with its work."
          }
        }
      },
      "RunAgentDefaultResponse": {
        "type": "object",
        "required": ["result"],
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ActionResult",
            "description": "The result of the agent run."
          },
          "storageState": {
            "type": "string",
            "description": "Stringified browser storage state as returned by a previous agent run. Contains cookies and auth-related data. Only returned if `returnStorageState` is true in the request. CAUTION: This may be a very large payload."
          },
          "agentState": {
            "type": "string",
            "description": "Stringified agent state as returned by a previous agent run. Only returned if `returnAgentState` is true in the request. CAUTION: This is a very large payload."
          },
          "stepCount": {
            "type": "number",
            "description": "Number of steps the agent took. Returned in non-streaming mode."
          }
        }
      },
      "RunAgentResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RunAgentDefaultResponse",
            "description": "Non-streaming response."
          },
          {
            "$ref": "#/components/schemas/RunAgentStreamChunk",
            "description": "Streaming response."
          }
        ]
      },
      "StepChunk": {
        "type": "object",
        "required": ["chunkType", "messageId", "actionResult", "summary"],
        "properties": {
          "chunkType": {
            "type": "string",
            "enum": ["step"]
          },
          "messageId": {
            "type": "string",
            "description": "The UUID of the message."
          },
          "actionResult": {
            "$ref": "#/components/schemas/ActionResult",
            "description": "The result of the agent run."
          },
          "summary": {
            "type": "string",
            "description": "A quick summary of the step."
          }
        }
      },
      "ErrorChunk": {
        "type": "object",
        "required": ["chunkType", "messageId", "error"],
        "properties": {
          "chunkType": {
            "type": "string",
            "enum": ["error"]
          },
          "messageId": {
            "type": "string",
            "description": "The UUID of the message."
          },
          "error": {
            "type": "string",
            "description": "The error that occurred during the agent run."
          }
        }
      },
      "TimeoutChunk": {
        "type": "object",
        "required": ["chunkType", "messageId", "actionResult", "summary"],
        "properties": {
          "chunkType": {
            "type": "string",
            "enum": ["timeout"]
          },
          "messageId": {
            "type": "string",
            "description": "The UUID of the message."
          },
          "actionResult": {
            "$ref": "#/components/schemas/ActionResult",
            "description": "The result of the agent run."
          },
          "summary": {
            "type": "string",
            "description": "A quick summary of the step."
          }
        }
      },
      "FinalOutputChunk": {
        "type": "object",
        "required": ["chunkType", "messageId", "content"],
        "properties": {
          "chunkType": {
            "type": "string",
            "enum": ["final_output"]
          },
          "messageId": {
            "type": "string",
            "description": "The UUID of the message."
          },
          "content": {
            "$ref": "#/components/schemas/RunAgentDefaultResponse",
            "description": "The final output of the agent."
          }
        }
      },
      "RunAgentStreamChunk": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/StepChunk",
            "description": "Step chunk. A step of the agent run."
          },
          {
            "$ref": "#/components/schemas/FinalOutputChunk",
            "description": "Final output chunk. The final output of the agent."
          },
          {
            "$ref": "#/components/schemas/TimeoutChunk",
            "description": "Timeout chunk. The final step if the agent timed out."
          },
          {
            "$ref": "#/components/schemas/ErrorChunk",
            "description": "Error chunk. The error details."
          }
        ]
      }
    }
  }
}
